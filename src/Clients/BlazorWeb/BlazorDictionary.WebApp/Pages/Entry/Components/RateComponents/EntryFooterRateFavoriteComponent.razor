@using BlazorDictionary.WebApp.Infrastructure.Models
@using Blazored.LocalStorage

<div class="container">
    <span>
        <a class="p-1">
            <span class="oi oi-arrow-top entry-vote @(VoteType == VoteType.Up ? "text-success" : "text-secondary")">

            </span>
        </a>
        <a class="p-3">
            <span class="oi oi-arrow-bottom entry-vote @(VoteType == VoteType.Down ? "text-danger" : "text-secondary")">

            </span>
        </a>

        <EntryFooterFavoriteComponent EntryId="@EntryId"
                                      FavoritedCount="@FavoritedCount"
                                      IsFavorited=@IsFavorited
                                      OnFavClicked="@FavoritedClicked"/>
    </span>
</div>

@code {
    [Inject]
    ISyncLocalStorageService localStorage { get; set; }

    [Parameter]
    public Common.ViewModels.VoteType VoteType { get; set; }

    [Parameter]
    public EventCallback<FavClickedEventArgs> OnFavClicked { get; set; }

    [Parameter]
    public EventCallback<VoteClickedEventArgs> OnVoteClicked { get; set; }

    [Parameter]
    public bool IsFavorited { get; set; }

    [Parameter]
    public Guid? EntryId { get; set; }

    [Parameter]
    public int FavoritedCount { get; set; } = 0;

    private async Task FavoritedClicked()
    {
        var eventArgs = new FavClickedEventArgs();
        eventArgs.EntryId = EntryId;
        eventArgs.IsFavorited = !IsFavorited;

        await OnFavClicked.InvokeAsync(eventArgs);

        StateHasChanged();
    }
    private async Task UpClicked()
    {
        var eventArgs = new VoteClickedEventArgs();
        eventArgs.EntryId = EntryId.Value;
        eventArgs.UpVoteDeleted = VoteType == VoteType.Up;
        eventArgs.IsUpVoteClicked = true;

        await OnVoteClicked.InvokeAsync(eventArgs);

        StateHasChanged();
    }
    private async Task DownClicked()
    {
        var eventArgs = new VoteClickedEventArgs();
        eventArgs.EntryId = EntryId.Value;
        eventArgs.DownVoteDeleted = VoteType == VoteType.Down;
        eventArgs.IsDownVoteClicked = true;

        await OnVoteClicked.InvokeAsync(eventArgs);

        StateHasChanged();
    }
}
